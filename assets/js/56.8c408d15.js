(window.webpackJsonp=window.webpackJsonp||[]).push([[56],{511:function(e,s,t){"use strict";t.r(s);var n=t(2),a=Object(n.a)({},(function(){var e=this,s=e._self._c;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h2",{attrs:{id:"api"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#api"}},[e._v("#")]),e._v(" API")]),e._v(" "),s("h3",{attrs:{id:"toref"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#toref"}},[e._v("#")]),e._v(" toRef")]),e._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"title"}),s("p",[e._v("vue3新特性，用于创建响应式对象的引用。\n将原有对象的某个属性转化为该对象的引用，使得在调用时可以像使用普通变量一样使用该属性。")])]),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("import { toRef } from 'vue'  // 引入\n\nconst state = { count: 0 }\n\nconst countRef = toRef(state, 'count')  // 使用\n\nconsole.log(countRef.value) // 输出0\n\nstate.count++\n\nconsole.log(countRef.value) // 输出1\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br")])]),s("ul",[s("li",[s("code",[e._v("state")]),e._v(" 包含一个 "),s("code",[e._v("count")]),e._v(" 属性，使用 "),s("code",[e._v("toRef")]),e._v(" 方法将其包装成一个响应式对象引用 "),s("code",[e._v("countRef")]),e._v("。\n"),s("ul",[s("li",[e._v("通过访问 "),s("code",[e._v("countRef.value")]),e._v(" 可以获取 "),s("code",[e._v("state.count")]),e._v(" 的值，且当 "),s("code",[e._v("state.count")]),e._v(" 改变时，"),s("code",[e._v("countRef.value")]),e._v(" 的值也会相应的更新")])])]),e._v(" "),s("li",[s("code",[e._v("toRef")]),e._v(" 返回的是一个具有对象引用特性的响应式对象，不仅仅是一个简单的 "),s("code",[e._v("getter/setter")]),e._v(" 函数。\n"),s("ul",[s("li",[e._v("在修改原始对象的属性时，引用对象也会自动更新")]),e._v(" "),s("li",[e._v("如果替换了整个原始对象，则引用将不再是响应式的")])])]),e._v(" "),s("li",[s("code",[e._v("toRef")]),e._v(" 创建的引用对象只能用于获取属性的值，不能用于修改属性的值\n"),s("ul",[s("li",[e._v("如果需要修改属性的值，可以使用 "),s("code",[e._v("toRefs")]),e._v(" 方法将一个对象的所有属性都包装为响应式对象的引用")])])])]),e._v(" "),s("h3",{attrs:{id:"torefs"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#torefs"}},[e._v("#")]),e._v(" toRefs")]),e._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"title"}),s("p",[e._v("vue3新特性，用于将一个响应式对象转化为由其属性构成的一组响应式对象引用。\n通过toRefs方法包装后，原始对象的每一个属性都会转换成可以使用.value的响应式对象。\n在将响应式对象传递给子组件时非常实用。")])]),s("ul",[s("li",[e._v("可以避免解构响应式对象时丢失响应式性质的问题\n"),s("ul",[s("li",[e._v("如果直接对 "),s("code",[e._v("state")]),e._v(" 进行解构，如 "),s("code",[e._v("const { count, name } = state")]),e._v("，"),s("code",[e._v("count")]),e._v(" 和 "),s("code",[e._v("name")]),e._v(" 不再具有响应式特性，"),s("code",[e._v("toRefs")]),e._v(" 可以保持所有属性的响应式能力。")])])])]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("import { reactive, toRefs } from 'vue'  // 引入\n\nconst state = reactive({\n  count: 0,\n  name: '张三'\n})\n\nconst refs = toRefs(state)  // 使用\n\nconsole.log(refs.count.value) // 输出0 -- 使用 .value的响应式对象\n\nstate.count++  // 修改\n\nconsole.log(refs.count.value) // 输出1\n\nrefs.name.value = '李四' // 修改\n\nconsole.log(state.name) // 输出'李四'\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br"),s("span",{staticClass:"line-number"},[e._v("16")]),s("br"),s("span",{staticClass:"line-number"},[e._v("17")]),s("br"),s("span",{staticClass:"line-number"},[e._v("18")]),s("br")])]),s("ul",[s("li",[e._v("使用 "),s("code",[e._v("toRefs")]),e._v(" 方法将这个响应式对象转化为一组响应式对象引用，并将其赋值给变量 "),s("code",[e._v("refs")]),e._v(" "),s("ul",[s("li",[e._v("通过访问 "),s("code",[e._v("refs.count.value")]),e._v(" 和 "),s("code",[e._v("refs.name.value")]),e._v(" 来获取 "),s("code",[e._v("state.count")]),e._v(" 和 "),s("code",[e._v("state.name")]),e._v(" 的值。")])])]),e._v(" "),s("li",[e._v("与 "),s("code",[e._v("toRef")]),e._v(" 不同的是，使用 "),s("code",[e._v("toRefs")]),e._v(" 创建的响应式对象引用不仅可以获取属性的值，还可以修改属性的值\n"),s("ul",[s("li",[e._v("通过 "),s("code",[e._v("refs.name.value = '李四'")]),e._v(" 将 "),s("code",[e._v("state.name")]),e._v(" 的值改为 '李四'。")])])]),e._v(" "),s("li",[e._v("如果直接对 "),s("code",[e._v("state")]),e._v(" 进行修改，"),s("code",[e._v("toRefs")]),e._v(" 返回的响应式对象引用也会随之更新，此时需要访问 "),s("code",[e._v(".value")]),e._v(" 来获取属性的值\n"),s("ul",[s("li",[e._v("如果执行 "),s("code",[e._v("state.count++")]),e._v("，那么 "),s("code",[e._v("refs.count.value")]),e._v(" 的值也会自动更新。")])])])])])}),[],!1,null,null,null);s.default=a.exports}}]);